[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "semantic-code-indexer"
version = "1.0.0"
description = "A semantic code analysis and indexing pipeline for Python codebases"
readme = "src/code_indexer/README.md"
license = {text = "MIT"}
authors = [
    {name = "Code Indexer Team", email = "team@example.com"}
]
maintainers = [
    {name = "Code Indexer Team", email = "team@example.com"}
]
keywords = [
    "code-analysis",
    "semantic-indexing", 
    "ast-parsing",
    "code-search",
    "embeddings",
    "knowledge-graph",
    "python-analysis"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "PyYAML>=6.0"
]

[project.optional-dependencies]
# Advanced ML features (for actual embedding generation)
ml = [
    "sentence-transformers>=2.2.0",
    "transformers>=4.20.0",
    "torch>=1.12.0",
    "scikit-learn>=1.1.0"
]
# Enhanced UX dependencies
enhanced = [
    "tqdm>=4.64.0",
    "rich>=13.0.0"
]
# MCP server dependencies
mcp = [
    "mcp>=1.0.0"
]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0"
]
# Testing dependencies
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0"
]
# Documentation dependencies
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=0.18.0"
]
# All optional features
all = [
    "semantic-code-indexer[ml,enhanced,mcp]"
]

[project.urls]
Homepage = "https://github.com/bringupsw/code-indexing"
Repository = "https://github.com/bringupsw/code-indexing"
Issues = "https://github.com/bringupsw/code-indexing/issues"
Documentation = "https://github.com/bringupsw/code-indexing#readme"

[project.scripts]
code-indexer = "code_indexer.apps.cli.main:main"
code-indexer-mcp = "code_indexer.apps.mcp.main:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["code_indexer*"]

[tool.setuptools.package-data]
"code_indexer" = ["*.yaml", "*.yml", "*.json"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py"
]
python_classes = [
    "Test*"
]
python_functions = [
    "test_*"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

# Coverage configuration
[tool.coverage.run]
source = ["src/code_indexer"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
module = [
    "code_indexer.*"
]

[[tool.mypy.overrides]]
module = [
    "sentence_transformers.*",
    "transformers.*", 
    "torch.*",
    "sklearn.*",
    "numpy.*",
    "rich.*",
    "tqdm.*"
]
ignore_missing_imports = true

# Flake8-like configuration for other tools
[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
per-file-ignores = [
    "__init__.py:F401"
]
